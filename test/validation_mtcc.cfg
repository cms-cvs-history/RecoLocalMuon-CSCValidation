process TEST = {

  source = PoolSource {
       untracked vstring fileNames = {
        "rfio:/castor/cern.ch/user/s/schmittm/stoyan/run4318_0.0.root" ,
        "rfio:/castor/cern.ch/user/s/schmittm/stoyan/run4318_0.1.root" ,
        "rfio:/castor/cern.ch/user/s/schmittm/stoyan/run4318_0.2.root" ,
        "rfio:/castor/cern.ch/user/s/schmittm/stoyan/run4318_0.3.root"
       }
  }


  untracked PSet maxEvents = {untracked int32 input = -1}

# Specify the output file for the reconstructed events.
  module out = PoolOutputModule {
    untracked string fileName ="eventsOutput.root"
  }

# These are some useful utilities.
#  service = Timing { }
#  service = SimpleMemoryCheck { }

# These are some geometry modules needed for recHits and segments
  include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
  include "Geometry/CSCGeometry/data/cscGeometry.cfi"
  es_module = MuonNumberingInitialization { }


# Need access to calibration constants.
#
# This comes from Oana !
#
        es_source = PoolDBESSource { 
          VPSet toGet = {
             { string record = "CSCGainsRcd"
               string tag    = "CSCGains_ideal" },
             { string record = "CSCPedestalsRcd"
               string tag    = "CSCPedestals_ideal" },
             { string record = "CSCNoiseMatrixRcd"
               string tag    = "CSCNoiseMatrix_ideal" },
             { string record = "CSCcrosstalkRcd"
               string tag    = "CSCCrosstalk_ideal" }
                                    }
           bool loadAll = true
           string connect="oracle://cms_orcoff_int2r/CMS_COND_CSC"
           untracked string catalog = "relationalcatalog_oracle://cms_orcoff_int2r/CMS_COND_GENERAL"
           string timetype = "runnumber"

           PSet DBParameters = {
               untracked string authenticationPath="/afs/cern.ch/cms/DB/conddb"
               untracked uint32 authenticationMethod = 0
                               }
        untracked PSet maxEvents = {untracked int32 input = 1}
     }


#--------------------------------------------------
# Specify the data unpacker, which makes the digi
# (Not needed for simulations...)
#--------------------------------------------------

  module muonCSCDigis = CSCDCCUnpacker {
    untracked bool Debug = false
    untracked bool PrintEventNumber = true
    FileInPath theMappingFile = "CondFormats/CSCObjects/data/csc_slice_test_map.txt"
    untracked bool UseExaminer = false
    untracked uint32 ErrorMask = 0xDFCFEFFF 
    untracked uint32 ExaminerMask = 0x7FB7BF6
    InputTag InputObjects = source
    untracked bool UnpackStatusDigis = true
    untracked bool isMTCCData = true
  }

#--------------------------------------------------
# Specify the recHit reconstruction routine.
#--------------------------------------------------

   include "RecoLocalMuon/CSCRecHitB/data/cscRecHitB_MTCC.cfi"
   replace csc2DRecHits.CSCStripDigiProducer                 = "muonCSCDigis"
   replace csc2DRecHits.CSCWireDigiProducer                  = "muonCSCDigis"
   replace csc2DRecHits.CSCchamberIdPrefix                   = 0

#--------------------------------------------------
# Specify the segment reconstruction routine.
#--------------------------------------------------

   include "RecoLocalMuon/CSCSegment/data/CSCSegmentAlgorithmSK.cfi"
   include "RecoLocalMuon/CSCSegment/data/CSCSegmentAlgorithmTC.cfi"
   include "RecoLocalMuon/CSCSegment/data/CSCSegmentAlgorithmDF.cfi"
   include "RecoLocalMuon/CSCSegment/data/CSCSegmentAlgorithmST.cfi"

   module cscSegments = CSCSegmentProducer {

    # Define input
    InputTag inputObjects = csc2DRecHits
    
    # Choice of the building algo: 1 SK, 2 TC, 3 DF, 4 ST, ...
    int32 algo_type = 3

    # std::vector<edm::ParameterSet>
    VPSet algo_psets = {
        {using CSCSegAlgoSK}, {using CSCSegAlgoTC}, {using CSCSegAlgoDF},
        {using CSCSegAlgoST}
    }
  }

#--------------------------------------------------
# Finally, specify my user analysis package !
#--------------------------------------------------

module cscValidation = CSCValidation{
    untracked string rootFileName = 'validationHists_mtcc.root' 
}

#--------------------------------------------------
# Specify the analysis path and output module.
#--------------------------------------------------
path p = {muonCSCDigis, csc2DRecHits, cscSegments, cscValidation}
#path p = {muonCSCDigis, csc2DRecHits, cscSegments}

# Specify the output:
#	endpath e = {out}

}
